# [ doc = r" Value read from the register" ] pub struct R { bits : u32 } # [ doc = r" Value to write to the register" ] pub struct W { bits : u32 } impl super :: LST1 { # [ doc = r" Modifies the contents of the register" ] # [ inline ] pub fn modify < F > ( & self , f : F ) where for < 'w > F : FnOnce ( & R , & 'w mut W ) -> & 'w mut W { let bits = self . register . get ( ) ; let r = R { bits : bits } ; let mut w = W { bits : bits } ; f ( & r , & mut w ) ; self . register . set ( w . bits ) ; } # [ doc = r" Reads the contents of the register" ] # [ inline ] pub fn read ( & self ) -> R { R { bits : self . register . get ( ) } } # [ doc = r" Writes to the register" ] # [ inline ] pub fn write < F > ( & self , f : F ) where F : FnOnce ( & mut W ) -> & mut W { let mut w = W :: reset_value ( ) ; f ( & mut w ) ; self . register . set ( w . bits ) ; } # [ doc = r" Writes the reset value to the register" ] # [ inline ] pub fn reset ( & self ) { self . write ( | w | w ) } } # [ doc = r" Value of the field" ] pub struct ADSEQ4R { bits : u8 } impl ADSEQ4R { # [ doc = r" Value of the field as raw bits" ] # [ inline ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct ADSEQ5R { bits : u8 } impl ADSEQ5R { # [ doc = r" Value of the field as raw bits" ] # [ inline ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct ADSEQ6R { bits : u8 } impl ADSEQ6R { # [ doc = r" Value of the field as raw bits" ] # [ inline ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Value of the field" ] pub struct ADSEQ7R { bits : u8 } impl ADSEQ7R { # [ doc = r" Value of the field as raw bits" ] # [ inline ] pub fn bits ( & self ) -> u8 { self . bits } } # [ doc = r" Proxy" ] pub struct _ADSEQ4W < 'a > { w : & 'a mut W } impl < 'a > _ADSEQ4W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ] pub unsafe fn bits ( self , value : u8 ) -> & 'a mut W { const MASK : u8 = 31 ; const OFFSET : u8 = 0 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( value & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _ADSEQ5W < 'a > { w : & 'a mut W } impl < 'a > _ADSEQ5W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ] pub unsafe fn bits ( self , value : u8 ) -> & 'a mut W { const MASK : u8 = 31 ; const OFFSET : u8 = 8 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( value & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _ADSEQ6W < 'a > { w : & 'a mut W } impl < 'a > _ADSEQ6W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ] pub unsafe fn bits ( self , value : u8 ) -> & 'a mut W { const MASK : u8 = 31 ; const OFFSET : u8 = 16 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( value & MASK ) as u32 ) << OFFSET ; self . w } } # [ doc = r" Proxy" ] pub struct _ADSEQ7W < 'a > { w : & 'a mut W } impl < 'a > _ADSEQ7W < 'a > { # [ doc = r" Writes raw bits to the field" ] # [ inline ] pub unsafe fn bits ( self , value : u8 ) -> & 'a mut W { const MASK : u8 = 31 ; const OFFSET : u8 = 24 ; self . w . bits &= ! ( ( MASK as u32 ) << OFFSET ) ; self . w . bits |= ( ( value & MASK ) as u32 ) << OFFSET ; self . w } } impl R { # [ doc = r" Value of the register as raw bits" ] # [ inline ] pub fn bits ( & self ) -> u32 { self . bits } # [ doc = "Bits 0:4 - ADSEQ4" ] # [ inline ] pub fn adseq4 ( & self ) -> ADSEQ4R { let bits = { const MASK : u8 = 31 ; const OFFSET : u8 = 0 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; ADSEQ4R { bits } } # [ doc = "Bits 8:12 - ADSEQ5" ] # [ inline ] pub fn adseq5 ( & self ) -> ADSEQ5R { let bits = { const MASK : u8 = 31 ; const OFFSET : u8 = 8 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; ADSEQ5R { bits } } # [ doc = "Bits 16:20 - ADSEQ6" ] # [ inline ] pub fn adseq6 ( & self ) -> ADSEQ6R { let bits = { const MASK : u8 = 31 ; const OFFSET : u8 = 16 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; ADSEQ6R { bits } } # [ doc = "Bits 24:28 - ADSEQ7" ] # [ inline ] pub fn adseq7 ( & self ) -> ADSEQ7R { let bits = { const MASK : u8 = 31 ; const OFFSET : u8 = 24 ; ( ( self . bits >> OFFSET ) & MASK as u32 ) as u8 } ; ADSEQ7R { bits } } } impl W { # [ doc = r" Reset value of the register" ] # [ inline ] pub fn reset_value ( ) -> W { W { bits : 0 } } # [ doc = r" Writes raw bits to the register" ] # [ inline ] pub unsafe fn bits ( & mut self , bits : u32 ) -> & mut Self { self . bits = bits ; self } # [ doc = "Bits 0:4 - ADSEQ4" ] # [ inline ] pub fn adseq4 ( & mut self ) -> _ADSEQ4W { _ADSEQ4W { w : self } } # [ doc = "Bits 8:12 - ADSEQ5" ] # [ inline ] pub fn adseq5 ( & mut self ) -> _ADSEQ5W { _ADSEQ5W { w : self } } # [ doc = "Bits 16:20 - ADSEQ6" ] # [ inline ] pub fn adseq6 ( & mut self ) -> _ADSEQ6W { _ADSEQ6W { w : self } } # [ doc = "Bits 24:28 - ADSEQ7" ] # [ inline ] pub fn adseq7 ( & mut self ) -> _ADSEQ7W { _ADSEQ7W { w : self } } }